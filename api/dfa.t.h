#define DFA_CAT_(a, b) a ## b
#define DFA_CAT(a, b) DFA_CAT_(a, b)

#if !defined(DFA_HEADER) && !defined(DFA_IMPL)
  #error "Define either DFA_HEADER or DFA_IMPL"
#endif

#ifndef DFA_DATA_TYPENAME
  #error "Define DFA_DATA_TYPENAME"
#endif

#ifndef DFA_DATA_COMPARE
  #error "Define DFA_DATA_COMPARE, the comparison function"
#endif

#ifndef DFA_DATA_SUCCESSOR
  #error "Define DFA_DATA_SUCCESSOR"
#endif

#if !defined(DFA_DATA_TRIVIAL_BY_VAL) && !defined(DFA_DATA_TRIVIAL_BY_PTR) && \
    !defined(DFA_DATA_NONTRIVIAL_BY_PTR)
  #error "Define one of DFA_DATA_TRIVIAL_BY_VAL, DFA_DATA_TRIVIAL_BY_PTR, " \
    "DFA_DATA_NONTRIVIAL_BY_PTR"
#endif

#ifdef DFA_ALLOC_TYPENAME
  #ifndef DFA_ALLOC
    #error "If DFA_ALLOC_TYPENAME is defined, DFA_ALLOC must also be defined"
  #endif
  #ifndef DFA_FREE
    #define DFA_FREE
  #endif
  #define DFA_ALLOC_ARG(allocator) , DFA_ALLOC_TYPENAME *allocator
#else
  #define DFA_ALLOC
  #define DFA_FREE
  #define DFA_ALLOC_ARG(allocator)
#endif

#ifndef DFA_TYPENAME
  #define DFA_TYPENAME DFA_CAT(DFA_DATA_TYPENAME, _dfa)
#endif

#define DFA_STATE_TYPENAME DFA_CAT(DFA_TYPENAME, _state)

#define DFA_STATE_LIST_TYPENAME DFA_CAT(DFA_STATE_TYPENAME, _array_list)

#define DFA_DATA_RANGE_TYPENAME DFA_CAT(DFA_TYPENAME, _char_range)

#define DFA_DATA_RANGE_IDX_PAIR_TYPENAME \
  DFA_CAT(DFA_DATA_RANGE_TYPENAME, _idx_pair)

#define DFA_DATA_RANGE_IDX_PAIR_TREE_TYPENAME \
  DFA_CAT(DFA_DATA_RANGE_IDX_PAIR_TYPENAME, _rb_tree)

#define DFA_INIT_FNNAME DFA_CAT(DFA_TYPENAME, _init)
#define DFA_INIT_SIGN sregex_result DFA_INIT_FNNAME(DFA_TYPENAME *to_init \
                                                    DFA_ALLOC_ARG(allocator))
#define DFA_INIT_DECL DFA_INIT_SIGN;

#ifdef DFA_HEADER

#define RANGE_DATA_TYPENAME DFA_DATA_TYPENAME
#define RANGE_DATA_COMPARE DFA_DATA_COMPARE
#define RANGE_DATA_SUCCESSOR DFA_DATA_SUCCESSOR
#if defined(DFA_DATA_TRIVIAL_BY_VAL)
  #define RANGE_DATA_TRIVIAL_BY_VAL_RANGE_BY_VAL
#elif defined(DFA_DATA_TRIVIAL_BY_PTR)
  #define RANGE_DATA_TRIVIAL_BY_PTR
#elif defined(DFA_DATA_NONTRIVIAL_BY_PTR)
  #define RANGE_DATA_NONTRIVIAL_BY_PTR
  #define RANGE_DATA_COPY DFA_DATA_COPY
  #define RANGE_DATA_MOVE DFA_DATA_MOVE
  #define RANGE_DATA_CLEAR DFA_DATA_CLEAR
#endif
#define RANGE_TYPENAME DFA_DATA_RANGE_TYPENAME
#define RANGE_HEADER
#include "range.t.h"
#undef RANGE_HEADER
#undef RANGE_TYPENAME
#undef RANGE_DATA_CLEAR
#undef RANGE_DATA_MOVE
#undef RANGE_DATA_COPY
#undef RANGE_DATA_NONTRIVIAL_BY_PTR
#undef RANGE_DATA_TRIVIAL_BY_PTR
#undef RANGE_DATA_TRIVIAL_BY_VAL_RANGE_BY_VAL
#undef RANGE_DATA_SUCCESSOR
#undef RANGE_DATA_COMPARE
#undef RANGE_DATA_TYPENAME

typedef struct DFA_DATA_RANGE_IDX_PAIR_TYPENAME
{
  DFA_DATA_RANGE_TYPENAME key;
  ptrdiff_t val; // index into the state array
} DFA_DATA_RANGE_IDX_PAIR_TYPENAME;

#define RB_TREE_DATA_TYPENAME DFA_DATA_RANGE_IDX_PAIR_TYPENAME
#define RB_TREE_DATA_COMPARE DFA_DATA_COMPARE
#if defined(DFA_DATA_TRIVIAL_BY_VAL)
  #define RB_TREE_DATA_TRIVIAL_BY_VAL
#elif defined(DFA_DATA_TRIVIAL_BY_PTR)
  #define RB_TREE_DATA_TRIVIAL_BY_PTR
#elif defined(DFA_DATA_NONTRIVIAL_BY_PTR)
  #define RB_TREE_DATA_NONTRIVIAL_BY_PTR
  #define RB_TREE_DATA_COPY DFA_DATA_COPY
  #define RB_TREE_DATA_MOVE DFA_DATA_MOVE
  #define RB_TREE_DATA_CLEAR DFA_DATA_CLEAR
#endif
#ifdef DFA_ALLOC_TYPENAME
#define RB_TREE_ALLOC_TYPENAME DFA_ALLOC_TYPENAME
#endif
#ifdef DFA_ALLOC
#define RB_TREE_ALLOC DFA_ALLOC
#endif
#ifdef DFA_FREE
#define RB_TREE_FREE DFA_FREE
#endif
#define RB_TREE_TYPENAME DFA_DATA_RANGE_IDX_PAIR_TREE_TYPENAME 
#define RB_TREE_HEADER
#include "rb_tree.t.h"
#undef RB_TREE_HEADER
#undef RB_TREE_TYPENAME
#undef RB_TREE_FREE
#undef RB_TREE_ALLOC
#undef RB_TREE_ALLOC_TYPENAME
#undef RB_TREE_DATA_CLEAR
#undef RB_TREE_DATA_MOVE
#undef RB_TREE_DATA_COPY
#undef RB_TREE_DATA_NONTRIVIAL_BY_PTR
#undef RB_TREE_DATA_TRIVIAL_BY_PTR
#undef RB_TREE_DATA_TRIVIAL_BY_VAL
#undef RB_TREE_DATA_COMPARE
#undef RB_TREE_DATA_TYPENAME

typedef struct DFA_STATE_TYPENAME
{
  DFA_DATA_RANGE_IDX_PAIR_TREE_TYPENAME char_state_map;
  bool accept;
} DFA_STATE_TYPENAME;

#define ARRAY_LIST_DATA_TYPENAME DFA_STATE_TYPENAME
#define ARRAY_LIST_DATA_COPY DFA_STATE_COPY_FNNAME
#define ARRAY_LIST_DATA_MOVE DFA_STATE_MOVE_FNNAME
#define ARRAY_LIST_DATA_CLEAR DFA_STATE_CLEAR_FNNAME
#ifdef DFA_ALLOC_TYPENAME
#define ARRAY_LIST_ALLOC_TYPENAME DFA_ALLOC_TYPENAME
#endif
#ifdef DFA_ALLOC
#define ARRAY_LIST_ALLOC DFA_ALLOC
#endif
#ifdef DFA_FREE
#define ARRAY_LIST_FREE DFA_ALLOC
#endif
#define ARRAY_LIST_TYPENAME DFA_STATE_LIST_TYPENAME
#include "array_list.t.h"
#undef ARRAY_LIST_TYPENAME
#undef ARRAY_LIST_FREE
#undef ARRAY_LIST_ALLOC
#undef ARRAY_LIST_ALLOC_TYPENAME
#undef ARRAY_LIST_DATA_CLEAR
#undef ARRAY_LIST_DATA_MOVE
#undef ARRAY_LIST_DATA_COPY
#undef ARRAY_LIST_DATA_TYPENAME

typedef struct DFA_TYPENAME
{
  DFA_STATE_LIST_TYPENAME states;
} DFA_TYPENAME;

#endif

#ifdef DFA_IMPL

#endif
